/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 162.0, "minX": 0.0, "maxY": 10262.0, "series": [{"data": [[0.0, 162.0], [0.1, 177.0], [0.2, 198.0], [0.3, 200.0], [0.4, 206.0], [0.5, 208.0], [0.6, 212.0], [0.7, 228.0], [0.8, 240.0], [0.9, 246.0], [1.0, 250.0], [1.1, 251.0], [1.2, 253.0], [1.3, 277.0], [1.4, 279.0], [1.5, 287.0], [1.6, 298.0], [1.7, 299.0], [1.8, 301.0], [1.9, 302.0], [2.0, 304.0], [2.1, 305.0], [2.2, 306.0], [2.3, 307.0], [2.4, 309.0], [2.5, 310.0], [2.6, 311.0], [2.7, 314.0], [2.8, 315.0], [2.9, 315.0], [3.0, 318.0], [3.1, 319.0], [3.2, 320.0], [3.3, 321.0], [3.4, 323.0], [3.5, 323.0], [3.6, 325.0], [3.7, 326.0], [3.8, 329.0], [3.9, 330.0], [4.0, 332.0], [4.1, 334.0], [4.2, 337.0], [4.3, 350.0], [4.4, 354.0], [4.5, 357.0], [4.6, 358.0], [4.7, 359.0], [4.8, 363.0], [4.9, 364.0], [5.0, 379.0], [5.1, 382.0], [5.2, 384.0], [5.3, 386.0], [5.4, 387.0], [5.5, 389.0], [5.6, 390.0], [5.7, 390.0], [5.8, 391.0], [5.9, 393.0], [6.0, 394.0], [6.1, 395.0], [6.2, 397.0], [6.3, 398.0], [6.4, 400.0], [6.5, 402.0], [6.6, 404.0], [6.7, 405.0], [6.8, 405.0], [6.9, 407.0], [7.0, 408.0], [7.1, 409.0], [7.2, 409.0], [7.3, 410.0], [7.4, 411.0], [7.5, 411.0], [7.6, 412.0], [7.7, 413.0], [7.8, 413.0], [7.9, 415.0], [8.0, 415.0], [8.1, 416.0], [8.2, 417.0], [8.3, 418.0], [8.4, 418.0], [8.5, 419.0], [8.6, 419.0], [8.7, 419.0], [8.8, 420.0], [8.9, 421.0], [9.0, 421.0], [9.1, 422.0], [9.2, 422.0], [9.3, 423.0], [9.4, 424.0], [9.5, 424.0], [9.6, 425.0], [9.7, 426.0], [9.8, 426.0], [9.9, 427.0], [10.0, 428.0], [10.1, 428.0], [10.2, 430.0], [10.3, 431.0], [10.4, 432.0], [10.5, 433.0], [10.6, 435.0], [10.7, 436.0], [10.8, 438.0], [10.9, 441.0], [11.0, 442.0], [11.1, 443.0], [11.2, 444.0], [11.3, 446.0], [11.4, 447.0], [11.5, 447.0], [11.6, 448.0], [11.7, 449.0], [11.8, 449.0], [11.9, 450.0], [12.0, 451.0], [12.1, 452.0], [12.2, 454.0], [12.3, 454.0], [12.4, 458.0], [12.5, 460.0], [12.6, 461.0], [12.7, 462.0], [12.8, 464.0], [12.9, 466.0], [13.0, 467.0], [13.1, 469.0], [13.2, 470.0], [13.3, 471.0], [13.4, 471.0], [13.5, 473.0], [13.6, 474.0], [13.7, 475.0], [13.8, 477.0], [13.9, 478.0], [14.0, 478.0], [14.1, 479.0], [14.2, 485.0], [14.3, 485.0], [14.4, 486.0], [14.5, 487.0], [14.6, 488.0], [14.7, 489.0], [14.8, 489.0], [14.9, 490.0], [15.0, 492.0], [15.1, 493.0], [15.2, 496.0], [15.3, 499.0], [15.4, 502.0], [15.5, 576.0], [15.6, 616.0], [15.7, 619.0], [15.8, 625.0], [15.9, 631.0], [16.0, 633.0], [16.1, 635.0], [16.2, 637.0], [16.3, 639.0], [16.4, 645.0], [16.5, 647.0], [16.6, 652.0], [16.7, 713.0], [16.8, 715.0], [16.9, 716.0], [17.0, 717.0], [17.1, 718.0], [17.2, 719.0], [17.3, 719.0], [17.4, 719.0], [17.5, 720.0], [17.6, 721.0], [17.7, 721.0], [17.8, 722.0], [17.9, 723.0], [18.0, 723.0], [18.1, 724.0], [18.2, 725.0], [18.3, 726.0], [18.4, 726.0], [18.5, 727.0], [18.6, 727.0], [18.7, 728.0], [18.8, 728.0], [18.9, 728.0], [19.0, 729.0], [19.1, 729.0], [19.2, 730.0], [19.3, 731.0], [19.4, 731.0], [19.5, 731.0], [19.6, 731.0], [19.7, 732.0], [19.8, 733.0], [19.9, 734.0], [20.0, 735.0], [20.1, 735.0], [20.2, 735.0], [20.3, 736.0], [20.4, 737.0], [20.5, 738.0], [20.6, 738.0], [20.7, 740.0], [20.8, 741.0], [20.9, 743.0], [21.0, 746.0], [21.1, 748.0], [21.2, 751.0], [21.3, 755.0], [21.4, 756.0], [21.5, 762.0], [21.6, 764.0], [21.7, 770.0], [21.8, 774.0], [21.9, 776.0], [22.0, 776.0], [22.1, 777.0], [22.2, 778.0], [22.3, 778.0], [22.4, 780.0], [22.5, 780.0], [22.6, 782.0], [22.7, 783.0], [22.8, 784.0], [22.9, 792.0], [23.0, 803.0], [23.1, 810.0], [23.2, 830.0], [23.3, 834.0], [23.4, 836.0], [23.5, 836.0], [23.6, 839.0], [23.7, 840.0], [23.8, 840.0], [23.9, 841.0], [24.0, 841.0], [24.1, 841.0], [24.2, 842.0], [24.3, 842.0], [24.4, 842.0], [24.5, 842.0], [24.6, 843.0], [24.7, 843.0], [24.8, 844.0], [24.9, 846.0], [25.0, 847.0], [25.1, 852.0], [25.2, 854.0], [25.3, 855.0], [25.4, 856.0], [25.5, 861.0], [25.6, 864.0], [25.7, 865.0], [25.8, 865.0], [25.9, 868.0], [26.0, 874.0], [26.1, 881.0], [26.2, 882.0], [26.3, 884.0], [26.4, 885.0], [26.5, 887.0], [26.6, 891.0], [26.7, 907.0], [26.8, 908.0], [26.9, 918.0], [27.0, 919.0], [27.1, 923.0], [27.2, 924.0], [27.3, 927.0], [27.4, 930.0], [27.5, 931.0], [27.6, 932.0], [27.7, 933.0], [27.8, 937.0], [27.9, 938.0], [28.0, 945.0], [28.1, 945.0], [28.2, 967.0], [28.3, 977.0], [28.4, 981.0], [28.5, 982.0], [28.6, 983.0], [28.7, 985.0], [28.8, 988.0], [28.9, 1011.0], [29.0, 1015.0], [29.1, 1018.0], [29.2, 1033.0], [29.3, 1052.0], [29.4, 1054.0], [29.5, 1056.0], [29.6, 1058.0], [29.7, 1064.0], [29.8, 1066.0], [29.9, 1067.0], [30.0, 1068.0], [30.1, 1069.0], [30.2, 1075.0], [30.3, 1077.0], [30.4, 1078.0], [30.5, 1084.0], [30.6, 1107.0], [30.7, 1194.0], [30.8, 1229.0], [30.9, 1251.0], [31.0, 1265.0], [31.1, 1287.0], [31.2, 1291.0], [31.3, 1293.0], [31.4, 1293.0], [31.5, 1294.0], [31.6, 1295.0], [31.7, 1297.0], [31.8, 1301.0], [31.9, 1305.0], [32.0, 1313.0], [32.1, 1319.0], [32.2, 1321.0], [32.3, 1322.0], [32.4, 1331.0], [32.5, 1335.0], [32.6, 1340.0], [32.7, 1341.0], [32.8, 1342.0], [32.9, 1343.0], [33.0, 1344.0], [33.1, 1346.0], [33.2, 1348.0], [33.3, 1348.0], [33.4, 1349.0], [33.5, 1350.0], [33.6, 1351.0], [33.7, 1351.0], [33.8, 1352.0], [33.9, 1352.0], [34.0, 1353.0], [34.1, 1354.0], [34.2, 1355.0], [34.3, 1357.0], [34.4, 1358.0], [34.5, 1359.0], [34.6, 1360.0], [34.7, 1361.0], [34.8, 1363.0], [34.9, 1368.0], [35.0, 1370.0], [35.1, 1371.0], [35.2, 1373.0], [35.3, 1374.0], [35.4, 1375.0], [35.5, 1376.0], [35.6, 1377.0], [35.7, 1379.0], [35.8, 1380.0], [35.9, 1384.0], [36.0, 1388.0], [36.1, 1391.0], [36.2, 1393.0], [36.3, 1393.0], [36.4, 1394.0], [36.5, 1395.0], [36.6, 1396.0], [36.7, 1397.0], [36.8, 1398.0], [36.9, 1402.0], [37.0, 1406.0], [37.1, 1412.0], [37.2, 1419.0], [37.3, 1419.0], [37.4, 1420.0], [37.5, 1420.0], [37.6, 1421.0], [37.7, 1422.0], [37.8, 1423.0], [37.9, 1425.0], [38.0, 1426.0], [38.1, 1434.0], [38.2, 1458.0], [38.3, 1472.0], [38.4, 1480.0], [38.5, 1481.0], [38.6, 1483.0], [38.7, 1498.0], [38.8, 1499.0], [38.9, 1500.0], [39.0, 1500.0], [39.1, 1501.0], [39.2, 1501.0], [39.3, 1502.0], [39.4, 1504.0], [39.5, 1517.0], [39.6, 1555.0], [39.7, 1556.0], [39.8, 1557.0], [39.9, 1566.0], [40.0, 1572.0], [40.1, 1574.0], [40.2, 1578.0], [40.3, 1614.0], [40.4, 1622.0], [40.5, 1624.0], [40.6, 1633.0], [40.7, 1672.0], [40.8, 1685.0], [40.9, 1691.0], [41.0, 1710.0], [41.1, 1717.0], [41.2, 1731.0], [41.3, 1738.0], [41.4, 1755.0], [41.5, 1795.0], [41.6, 1800.0], [41.7, 1808.0], [41.8, 1812.0], [41.9, 1814.0], [42.0, 1819.0], [42.1, 1825.0], [42.2, 1833.0], [42.3, 1835.0], [42.4, 1837.0], [42.5, 1844.0], [42.6, 1858.0], [42.7, 1859.0], [42.8, 1863.0], [42.9, 1867.0], [43.0, 1870.0], [43.1, 1879.0], [43.2, 1882.0], [43.3, 1883.0], [43.4, 1885.0], [43.5, 1885.0], [43.6, 1886.0], [43.7, 1886.0], [43.8, 1888.0], [43.9, 1892.0], [44.0, 1897.0], [44.1, 1901.0], [44.2, 1913.0], [44.3, 1938.0], [44.4, 1940.0], [44.5, 1945.0], [44.6, 1947.0], [44.7, 1951.0], [44.8, 1957.0], [44.9, 1962.0], [45.0, 1987.0], [45.1, 1999.0], [45.2, 2008.0], [45.3, 2022.0], [45.4, 2029.0], [45.5, 2031.0], [45.6, 2073.0], [45.7, 2077.0], [45.8, 2082.0], [45.9, 2089.0], [46.0, 2090.0], [46.1, 2094.0], [46.2, 2095.0], [46.3, 2097.0], [46.4, 2101.0], [46.5, 2110.0], [46.6, 2112.0], [46.7, 2124.0], [46.8, 2133.0], [46.9, 2134.0], [47.0, 2135.0], [47.1, 2138.0], [47.2, 2142.0], [47.3, 2144.0], [47.4, 2151.0], [47.5, 2153.0], [47.6, 2154.0], [47.7, 2155.0], [47.8, 2156.0], [47.9, 2156.0], [48.0, 2157.0], [48.1, 2158.0], [48.2, 2159.0], [48.3, 2160.0], [48.4, 2161.0], [48.5, 2162.0], [48.6, 2164.0], [48.7, 2168.0], [48.8, 2170.0], [48.9, 2171.0], [49.0, 2174.0], [49.1, 2192.0], [49.2, 2193.0], [49.3, 2194.0], [49.4, 2195.0], [49.5, 2196.0], [49.6, 2198.0], [49.7, 2198.0], [49.8, 2201.0], [49.9, 2203.0], [50.0, 2211.0], [50.1, 2217.0], [50.2, 2222.0], [50.3, 2224.0], [50.4, 2231.0], [50.5, 2234.0], [50.6, 2236.0], [50.7, 2243.0], [50.8, 2244.0], [50.9, 2244.0], [51.0, 2244.0], [51.1, 2245.0], [51.2, 2245.0], [51.3, 2246.0], [51.4, 2246.0], [51.5, 2247.0], [51.6, 2247.0], [51.7, 2248.0], [51.8, 2251.0], [51.9, 2256.0], [52.0, 2259.0], [52.1, 2260.0], [52.2, 2262.0], [52.3, 2266.0], [52.4, 2269.0], [52.5, 2276.0], [52.6, 2282.0], [52.7, 2287.0], [52.8, 2292.0], [52.9, 2297.0], [53.0, 2300.0], [53.1, 2306.0], [53.2, 2322.0], [53.3, 2327.0], [53.4, 2334.0], [53.5, 2337.0], [53.6, 2339.0], [53.7, 2343.0], [53.8, 2351.0], [53.9, 2356.0], [54.0, 2363.0], [54.1, 2370.0], [54.2, 2375.0], [54.3, 2385.0], [54.4, 2390.0], [54.5, 2394.0], [54.6, 2408.0], [54.7, 2445.0], [54.8, 2457.0], [54.9, 2464.0], [55.0, 2493.0], [55.1, 2502.0], [55.2, 2511.0], [55.3, 2545.0], [55.4, 2552.0], [55.5, 2566.0], [55.6, 2573.0], [55.7, 2587.0], [55.8, 2598.0], [55.9, 2607.0], [56.0, 2616.0], [56.1, 2624.0], [56.2, 2648.0], [56.3, 2658.0], [56.4, 2662.0], [56.5, 2676.0], [56.6, 2684.0], [56.7, 2693.0], [56.8, 2700.0], [56.9, 2705.0], [57.0, 2717.0], [57.1, 2726.0], [57.2, 2735.0], [57.3, 2746.0], [57.4, 2763.0], [57.5, 2799.0], [57.6, 2814.0], [57.7, 2817.0], [57.8, 2829.0], [57.9, 2838.0], [58.0, 2841.0], [58.1, 2846.0], [58.2, 2853.0], [58.3, 2866.0], [58.4, 2872.0], [58.5, 2878.0], [58.6, 2884.0], [58.7, 2898.0], [58.8, 2900.0], [58.9, 2904.0], [59.0, 2914.0], [59.1, 2933.0], [59.2, 2937.0], [59.3, 2948.0], [59.4, 2952.0], [59.5, 2956.0], [59.6, 2986.0], [59.7, 3011.0], [59.8, 3028.0], [59.9, 3033.0], [60.0, 3041.0], [60.1, 3051.0], [60.2, 3064.0], [60.3, 3086.0], [60.4, 3124.0], [60.5, 3146.0], [60.6, 3161.0], [60.7, 3190.0], [60.8, 3193.0], [60.9, 3193.0], [61.0, 3194.0], [61.1, 3195.0], [61.2, 3217.0], [61.3, 3222.0], [61.4, 3254.0], [61.5, 3256.0], [61.6, 3267.0], [61.7, 3280.0], [61.8, 3281.0], [61.9, 3286.0], [62.0, 3298.0], [62.1, 3312.0], [62.2, 3316.0], [62.3, 3327.0], [62.4, 3331.0], [62.5, 3333.0], [62.6, 3334.0], [62.7, 3335.0], [62.8, 3348.0], [62.9, 3356.0], [63.0, 3368.0], [63.1, 3373.0], [63.2, 3396.0], [63.3, 3397.0], [63.4, 3398.0], [63.5, 3398.0], [63.6, 3405.0], [63.7, 3418.0], [63.8, 3424.0], [63.9, 3427.0], [64.0, 3441.0], [64.1, 3452.0], [64.2, 3470.0], [64.3, 3471.0], [64.4, 3473.0], [64.5, 3482.0], [64.6, 3485.0], [64.7, 3486.0], [64.8, 3495.0], [64.9, 3498.0], [65.0, 3506.0], [65.1, 3511.0], [65.2, 3542.0], [65.3, 3547.0], [65.4, 3551.0], [65.5, 3555.0], [65.6, 3562.0], [65.7, 3568.0], [65.8, 3621.0], [65.9, 3631.0], [66.0, 3643.0], [66.1, 3648.0], [66.2, 3651.0], [66.3, 3652.0], [66.4, 3654.0], [66.5, 3656.0], [66.6, 3683.0], [66.7, 3741.0], [66.8, 3750.0], [66.9, 3768.0], [67.0, 3782.0], [67.1, 3786.0], [67.2, 3798.0], [67.3, 3803.0], [67.4, 3821.0], [67.5, 3831.0], [67.6, 3835.0], [67.7, 3844.0], [67.8, 3860.0], [67.9, 3880.0], [68.0, 3892.0], [68.1, 3905.0], [68.2, 3914.0], [68.3, 3918.0], [68.4, 3924.0], [68.5, 3931.0], [68.6, 3939.0], [68.7, 3946.0], [68.8, 3959.0], [68.9, 3964.0], [69.0, 3975.0], [69.1, 3981.0], [69.2, 3985.0], [69.3, 3991.0], [69.4, 4010.0], [69.5, 4025.0], [69.6, 4025.0], [69.7, 4027.0], [69.8, 4034.0], [69.9, 4041.0], [70.0, 4044.0], [70.1, 4046.0], [70.2, 4048.0], [70.3, 4058.0], [70.4, 4066.0], [70.5, 4073.0], [70.6, 4082.0], [70.7, 4084.0], [70.8, 4087.0], [70.9, 4088.0], [71.0, 4123.0], [71.1, 4128.0], [71.2, 4132.0], [71.3, 4146.0], [71.4, 4155.0], [71.5, 4159.0], [71.6, 4164.0], [71.7, 4168.0], [71.8, 4170.0], [71.9, 4172.0], [72.0, 4174.0], [72.1, 4185.0], [72.2, 4190.0], [72.3, 4192.0], [72.4, 4201.0], [72.5, 4218.0], [72.6, 4228.0], [72.7, 4230.0], [72.8, 4231.0], [72.9, 4236.0], [73.0, 4238.0], [73.1, 4250.0], [73.2, 4257.0], [73.3, 4259.0], [73.4, 4260.0], [73.5, 4262.0], [73.6, 4268.0], [73.7, 4274.0], [73.8, 4281.0], [73.9, 4286.0], [74.0, 4288.0], [74.1, 4291.0], [74.2, 4292.0], [74.3, 4296.0], [74.4, 4300.0], [74.5, 4303.0], [74.6, 4307.0], [74.7, 4309.0], [74.8, 4316.0], [74.9, 4321.0], [75.0, 4336.0], [75.1, 4349.0], [75.2, 4354.0], [75.3, 4366.0], [75.4, 4382.0], [75.5, 4407.0], [75.6, 4417.0], [75.7, 4418.0], [75.8, 4455.0], [75.9, 4472.0], [76.0, 4498.0], [76.1, 4501.0], [76.2, 4503.0], [76.3, 4505.0], [76.4, 4506.0], [76.5, 4507.0], [76.6, 4508.0], [76.7, 4509.0], [76.8, 4515.0], [76.9, 4519.0], [77.0, 4519.0], [77.1, 4520.0], [77.2, 4522.0], [77.3, 4526.0], [77.4, 4537.0], [77.5, 4546.0], [77.6, 4560.0], [77.7, 4565.0], [77.8, 4575.0], [77.9, 4576.0], [78.0, 4578.0], [78.1, 4581.0], [78.2, 4583.0], [78.3, 4587.0], [78.4, 4593.0], [78.5, 4659.0], [78.6, 4710.0], [78.7, 4711.0], [78.8, 4722.0], [78.9, 4724.0], [79.0, 4736.0], [79.1, 4771.0], [79.2, 4789.0], [79.3, 4790.0], [79.4, 4793.0], [79.5, 4794.0], [79.6, 4794.0], [79.7, 4799.0], [79.8, 4805.0], [79.9, 4817.0], [80.0, 4864.0], [80.1, 4868.0], [80.2, 4876.0], [80.3, 4878.0], [80.4, 4888.0], [80.5, 4914.0], [80.6, 4915.0], [80.7, 4940.0], [80.8, 4942.0], [80.9, 4946.0], [81.0, 4954.0], [81.1, 4970.0], [81.2, 4975.0], [81.3, 4978.0], [81.4, 4982.0], [81.5, 4985.0], [81.6, 4993.0], [81.7, 4999.0], [81.8, 5001.0], [81.9, 5008.0], [82.0, 5024.0], [82.1, 5036.0], [82.2, 5039.0], [82.3, 5040.0], [82.4, 5043.0], [82.5, 5044.0], [82.6, 5044.0], [82.7, 5047.0], [82.8, 5059.0], [82.9, 5062.0], [83.0, 5068.0], [83.1, 5077.0], [83.2, 5098.0], [83.3, 5103.0], [83.4, 5124.0], [83.5, 5133.0], [83.6, 5157.0], [83.7, 5164.0], [83.8, 5182.0], [83.9, 5189.0], [84.0, 5258.0], [84.1, 5265.0], [84.2, 5297.0], [84.3, 5309.0], [84.4, 5342.0], [84.5, 5394.0], [84.6, 5420.0], [84.7, 5471.0], [84.8, 5488.0], [84.9, 5491.0], [85.0, 5581.0], [85.1, 5588.0], [85.2, 5638.0], [85.3, 5641.0], [85.4, 5643.0], [85.5, 5657.0], [85.6, 5679.0], [85.7, 5702.0], [85.8, 5721.0], [85.9, 5722.0], [86.0, 5722.0], [86.1, 5723.0], [86.2, 5724.0], [86.3, 5729.0], [86.4, 5731.0], [86.5, 5733.0], [86.6, 5738.0], [86.7, 5788.0], [86.8, 5791.0], [86.9, 5792.0], [87.0, 5793.0], [87.1, 5793.0], [87.2, 5803.0], [87.3, 5807.0], [87.4, 5809.0], [87.5, 5820.0], [87.6, 5836.0], [87.7, 5848.0], [87.8, 5850.0], [87.9, 5854.0], [88.0, 5862.0], [88.1, 5863.0], [88.2, 5865.0], [88.3, 5866.0], [88.4, 5873.0], [88.5, 5879.0], [88.6, 5887.0], [88.7, 5894.0], [88.8, 5900.0], [88.9, 5917.0], [89.0, 5922.0], [89.1, 5925.0], [89.2, 5927.0], [89.3, 5929.0], [89.4, 5931.0], [89.5, 5937.0], [89.6, 5940.0], [89.7, 5951.0], [89.8, 5952.0], [89.9, 5958.0], [90.0, 5968.0], [90.1, 5969.0], [90.2, 5969.0], [90.3, 5990.0], [90.4, 5991.0], [90.5, 5992.0], [90.6, 6003.0], [90.7, 6029.0], [90.8, 6032.0], [90.9, 6049.0], [91.0, 6056.0], [91.1, 6060.0], [91.2, 6078.0], [91.3, 6081.0], [91.4, 6095.0], [91.5, 6096.0], [91.6, 6132.0], [91.7, 6133.0], [91.8, 6135.0], [91.9, 6138.0], [92.0, 6148.0], [92.1, 6161.0], [92.2, 6200.0], [92.3, 6202.0], [92.4, 6203.0], [92.5, 6206.0], [92.6, 6213.0], [92.7, 6216.0], [92.8, 6219.0], [92.9, 6229.0], [93.0, 6230.0], [93.1, 6234.0], [93.2, 6236.0], [93.3, 6239.0], [93.4, 6260.0], [93.5, 6269.0], [93.6, 6272.0], [93.7, 6276.0], [93.8, 6299.0], [93.9, 6303.0], [94.0, 6308.0], [94.1, 6311.0], [94.2, 6315.0], [94.3, 6325.0], [94.4, 6328.0], [94.5, 6357.0], [94.6, 6388.0], [94.7, 6431.0], [94.8, 6458.0], [94.9, 6473.0], [95.0, 6548.0], [95.1, 6563.0], [95.2, 6567.0], [95.3, 6571.0], [95.4, 6578.0], [95.5, 6579.0], [95.6, 6580.0], [95.7, 6582.0], [95.8, 6587.0], [95.9, 6621.0], [96.0, 6623.0], [96.1, 6697.0], [96.2, 6702.0], [96.3, 6710.0], [96.4, 6716.0], [96.5, 6763.0], [96.6, 6769.0], [96.7, 6779.0], [96.8, 6781.0], [96.9, 6933.0], [97.0, 6985.0], [97.1, 7037.0], [97.2, 7076.0], [97.3, 7153.0], [97.4, 7159.0], [97.5, 7221.0], [97.6, 7250.0], [97.7, 7255.0], [97.8, 7312.0], [97.9, 7371.0], [98.0, 7383.0], [98.1, 7485.0], [98.2, 8195.0], [98.3, 8578.0], [98.4, 8686.0], [98.5, 8700.0], [98.6, 8705.0], [98.7, 8717.0], [98.8, 9190.0], [98.9, 9199.0], [99.0, 9216.0], [99.1, 9223.0], [99.2, 9232.0], [99.3, 9234.0], [99.4, 9236.0], [99.5, 9239.0], [99.6, 9243.0], [99.7, 9245.0], [99.8, 9382.0], [99.9, 10259.0], [100.0, 10262.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 100.0, "maxY": 447.0, "series": [{"data": [[600.0, 52.0], [700.0, 317.0], [800.0, 183.0], [900.0, 113.0], [1000.0, 85.0], [1100.0, 6.0], [1200.0, 53.0], [1300.0, 256.0], [1400.0, 99.0], [1500.0, 71.0], [1600.0, 34.0], [1700.0, 29.0], [1800.0, 123.0], [1900.0, 55.0], [2000.0, 61.0], [2100.0, 169.0], [2200.0, 163.0], [2300.0, 79.0], [2400.0, 24.0], [2500.0, 39.0], [2600.0, 48.0], [2700.0, 36.0], [2800.0, 62.0], [2900.0, 47.0], [3000.0, 32.0], [3100.0, 42.0], [3200.0, 42.0], [3300.0, 77.0], [3400.0, 68.0], [3500.0, 42.0], [3600.0, 45.0], [3700.0, 30.0], [3800.0, 41.0], [3900.0, 63.0], [4000.0, 80.0], [4200.0, 100.0], [4100.0, 72.0], [4300.0, 54.0], [4500.0, 121.0], [4400.0, 29.0], [4600.0, 6.0], [4700.0, 57.0], [4800.0, 38.0], [5000.0, 73.0], [5100.0, 35.0], [4900.0, 64.0], [5300.0, 18.0], [5200.0, 15.0], [5400.0, 20.0], [5500.0, 9.0], [5600.0, 25.0], [5700.0, 76.0], [5800.0, 81.0], [6000.0, 49.0], [5900.0, 89.0], [6100.0, 32.0], [6300.0, 42.0], [6200.0, 81.0], [6400.0, 14.0], [6500.0, 46.0], [6600.0, 15.0], [6700.0, 33.0], [6800.0, 3.0], [6900.0, 7.0], [7000.0, 10.0], [7100.0, 13.0], [7300.0, 11.0], [7400.0, 5.0], [7200.0, 16.0], [8000.0, 3.0], [8100.0, 5.0], [8700.0, 15.0], [8600.0, 8.0], [8500.0, 2.0], [9100.0, 7.0], [9200.0, 43.0], [9300.0, 3.0], [10200.0, 9.0], [100.0, 15.0], [200.0, 71.0], [300.0, 234.0], [400.0, 447.0], [500.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 767.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3047.0, "series": [{"data": [[0.0, 767.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1186.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3047.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1219.9221999999943, "minX": 1.69529976E12, "maxY": 1219.9221999999943, "series": [{"data": [[1.69529976E12, 1219.9221999999943]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69529976E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 169.6, "minX": 1.0, "maxY": 10261.0, "series": [{"data": [[4.0, 10261.0], [9.0, 10258.6], [15.0, 9232.333333333334], [17.0, 9233.0], [20.0, 9239.333333333334], [21.0, 9229.0], [26.0, 9239.666666666666], [27.0, 9238.0], [29.0, 9239.0], [35.0, 9244.0], [34.0, 9238.333333333334], [36.0, 9235.666666666666], [40.0, 9245.0], [43.0, 9214.0], [42.0, 9199.0], [47.0, 9243.0], [48.0, 9221.5], [51.0, 9198.0], [52.0, 9221.0], [57.0, 9216.2], [56.0, 9217.5], [59.0, 9190.0], [58.0, 9188.0], [63.0, 8578.0], [62.0, 8616.333333333334], [67.0, 9350.0], [66.0, 9387.0], [64.0, 8566.0], [72.0, 8707.0], [76.0, 8686.0], [80.0, 8696.2], [86.0, 8721.0], [91.0, 7404.0], [90.0, 7460.0], [88.0, 8560.888888888889], [93.0, 7312.0], [92.0, 7345.0], [103.0, 7257.5], [106.0, 7151.0], [105.0, 7249.0], [104.0, 7256.0], [109.0, 7006.0], [108.0, 7006.0], [113.0, 6985.0], [112.0, 7229.333333333333], [116.0, 7105.333333333333], [123.0, 176.0], [121.0, 7123.4], [124.0, 169.6], [127.0, 207.0], [125.0, 7157.25], [133.0, 285.8], [129.0, 4174.857142857143], [130.0, 1643.8], [134.0, 373.4285714285714], [131.0, 2006.0], [135.0, 430.7142857142857], [132.0, 2629.0], [128.0, 439.0], [140.0, 1645.2], [136.0, 224.625], [137.0, 5202.75], [143.0, 408.4], [139.0, 2592.3333333333335], [141.0, 6983.0], [138.0, 7034.0], [148.0, 5799.4], [147.0, 3897.5], [146.0, 413.0], [145.0, 419.0], [144.0, 7380.0], [159.0, 419.7142857142857], [153.0, 402.0], [152.0, 407.6666666666667], [158.0, 6307.75], [154.0, 6431.833333333333], [166.0, 1809.25], [164.0, 360.5714285714286], [167.0, 249.2], [165.0, 244.0], [163.0, 6302.5], [161.0, 6520.333333333333], [169.0, 919.3333333333334], [168.0, 2256.333333333333], [175.0, 4969.111111111111], [174.0, 417.0], [172.0, 410.0], [183.0, 411.6666666666667], [180.0, 425.0], [176.0, 411.75], [182.0, 8037.0], [181.0, 6856.0], [191.0, 394.0], [190.0, 387.83333333333337], [184.0, 383.0], [197.0, 391.0], [196.0, 391.3333333333333], [193.0, 390.0], [192.0, 390.0], [207.0, 335.6], [204.0, 391.5], [202.0, 389.5], [200.0, 394.3333333333333], [215.0, 362.3333333333333], [214.0, 323.46153846153845], [213.0, 314.83333333333337], [211.0, 5651.000000000001], [222.0, 1142.857142857143], [221.0, 2261.333333333333], [217.0, 321.44444444444446], [219.0, 3268.4285714285716], [218.0, 1780.25], [223.0, 1482.6], [216.0, 331.0], [220.0, 3276.0], [225.0, 325.625], [231.0, 311.0], [230.0, 338.5], [228.0, 301.0], [227.0, 2256.666666666667], [226.0, 1926.4545454545453], [239.0, 988.1176470588235], [238.0, 4682.0], [237.0, 953.1071428571429], [234.0, 313.0], [232.0, 776.0714285714287], [235.0, 360.875], [233.0, 351.5], [236.0, 410.5], [247.0, 2321.6666666666665], [246.0, 336.0], [244.0, 354.57142857142856], [243.0, 335.0], [241.0, 317.0], [242.0, 276.0], [240.0, 353.94736842105266], [250.0, 360.0], [249.0, 4632.166666666667], [251.0, 6767.0], [248.0, 6772.5], [270.0, 412.5], [268.0, 418.09999999999997], [269.0, 411.0], [267.0, 1229.0], [266.0, 2277.3333333333335], [264.0, 3757.2], [263.0, 397.0], [257.0, 6030.0], [261.0, 6030.0], [258.0, 397.5], [271.0, 438.12499999999994], [265.0, 419.0], [275.0, 3620.1428571428573], [276.0, 422.5], [277.0, 433.5], [282.0, 1218.4285714285716], [283.0, 889.3333333333334], [285.0, 461.25], [284.0, 458.7], [280.0, 427.2], [287.0, 4738.25], [286.0, 1565.2], [281.0, 4575.5], [278.0, 432.5], [274.0, 416.0], [273.0, 415.0], [300.0, 452.0], [298.0, 451.0], [295.0, 465.1111111111111], [294.0, 424.5], [292.0, 2479.363636363636], [291.0, 424.0], [288.0, 3451.0], [297.0, 472.5], [318.0, 382.0], [317.0, 825.8518518518517], [314.0, 386.0], [311.0, 421.15], [310.0, 2253.0], [309.0, 1053.6315789473683], [312.0, 411.0], [308.0, 469.0], [307.0, 2666.6060606060605], [304.0, 6460.0], [328.0, 391.16666666666663], [330.0, 6083.538461538461], [329.0, 6048.0], [321.0, 6303.666666666667], [351.0, 5872.75], [347.0, 5991.700000000001], [337.0, 6001.0], [336.0, 5906.0], [367.0, 3678.0], [364.0, 5862.5], [360.0, 5864.0], [358.0, 5865.166666666666], [352.0, 5870.0], [381.0, 734.1428571428571], [383.0, 3351.0], [380.0, 734.0], [371.0, 5858.0], [370.0, 5859.0], [379.0, 723.0], [369.0, 2503.0833333333335], [368.0, 4154.666666666667], [373.0, 5854.0], [378.0, 6933.0], [377.0, 5853.0], [376.0, 6240.5], [399.0, 1712.6666666666667], [397.0, 731.0], [387.0, 5969.0], [395.0, 2006.0], [394.0, 2690.0], [393.0, 2032.75], [386.0, 729.6666666666666], [385.0, 3344.0], [392.0, 5969.5], [390.0, 5968.8], [388.0, 6621.0], [412.0, 740.5], [405.0, 1933.0], [407.0, 733.4285714285714], [402.0, 5847.0], [401.0, 6235.0], [406.0, 750.875], [411.0, 4542.0], [409.0, 741.0], [415.0, 749.0], [404.0, 3298.5], [408.0, 6196.285714285715], [431.0, 3934.8], [430.0, 738.0], [424.0, 747.0], [421.0, 744.8333333333333], [419.0, 739.0], [417.0, 739.5], [429.0, 6452.833333333333], [428.0, 6063.666666666667], [426.0, 6579.0], [425.0, 6579.0], [439.0, 754.6666666666667], [436.0, 743.0], [434.0, 742.5], [447.0, 753.0], [445.0, 5792.666666666667], [441.0, 6227.75], [437.0, 6293.0], [435.0, 6285.0], [432.0, 5803.0], [450.0, 778.0], [463.0, 2035.5], [461.0, 3329.5], [451.0, 5793.0], [462.0, 5921.0], [459.0, 2838.2], [458.0, 735.0], [457.0, 4105.666666666667], [456.0, 5793.0], [455.0, 732.25], [453.0, 737.0], [452.0, 5793.666666666667], [454.0, 5791.0], [449.0, 1477.4285714285713], [448.0, 5792.0], [478.0, 1989.25], [479.0, 2752.2], [477.0, 4915.25], [476.0, 4452.666666666667], [475.0, 4311.666666666667], [474.0, 726.5], [472.0, 3316.0], [471.0, 729.0], [464.0, 737.0], [466.0, 734.5], [465.0, 738.0], [470.0, 5065.8], [468.0, 728.0], [493.0, 724.0], [495.0, 728.5714285714286], [492.0, 728.5], [483.0, 728.0], [481.0, 730.0], [480.0, 3259.0], [487.0, 5733.0], [491.0, 727.75], [490.0, 730.0], [489.0, 4483.5], [488.0, 727.0], [486.0, 728.0], [485.0, 3595.6666666666665], [484.0, 724.5714285714286], [511.0, 723.1999999999999], [510.0, 3481.5], [507.0, 726.5], [506.0, 721.0], [505.0, 725.6666666666667], [504.0, 5727.0], [503.0, 2392.3333333333335], [502.0, 728.0], [501.0, 4868.75], [499.0, 726.5], [497.0, 728.0], [498.0, 5730.555555555556], [530.0, 1714.8], [543.0, 493.0], [541.0, 6299.0], [540.0, 6086.0], [539.0, 496.0], [538.0, 3955.5], [537.0, 5721.0], [519.0, 721.3333333333334], [517.0, 721.3333333333334], [516.0, 721.6666666666666], [515.0, 719.0], [514.0, 5780.555555555556], [518.0, 720.0], [526.0, 716.0], [525.0, 713.0], [523.0, 719.6666666666666], [524.0, 717.0], [535.0, 2809.714285714286], [532.0, 3192.375], [533.0, 718.0], [531.0, 3722.6], [529.0, 713.0], [573.0, 450.0], [575.0, 2272.5882352941176], [574.0, 5641.0], [572.0, 2205.666666666667], [569.0, 5639.5], [568.0, 5641.5], [567.0, 488.5], [566.0, 5641.333333333333], [563.0, 488.85714285714283], [561.0, 489.0], [560.0, 5646.0], [556.0, 489.875], [558.0, 6047.058823529412], [545.0, 493.0], [544.0, 494.0], [551.0, 491.0], [550.0, 492.0], [546.0, 492.0], [603.0, 426.0], [579.0, 869.3333333333333], [580.0, 483.0], [583.0, 6214.0], [581.0, 6389.5], [601.0, 454.0], [600.0, 474.5], [578.0, 1630.6], [576.0, 458.5], [591.0, 6328.0], [577.0, 486.0], [590.0, 3403.5], [589.0, 477.8], [585.0, 479.0], [586.0, 6272.833333333333], [588.0, 6333.5], [593.0, 455.44444444444446], [596.0, 444.4], [598.0, 2815.8], [597.0, 6096.2], [607.0, 5136.363636363636], [606.0, 6148.0], [604.0, 479.0], [605.0, 453.2], [635.0, 422.4], [613.0, 1404.6666666666667], [617.0, 4199.666666666667], [618.0, 448.625], [623.0, 2969.25], [621.0, 5489.0], [620.0, 5491.0], [608.0, 449.0], [610.0, 6137.0], [609.0, 5948.0], [619.0, 4008.3333333333335], [614.0, 2336.666666666667], [615.0, 6096.0], [612.0, 3274.5], [611.0, 1226.875], [638.0, 460.75], [637.0, 6617.0], [625.0, 448.0], [624.0, 447.0], [629.0, 3800.0], [626.0, 428.0], [633.0, 424.0], [632.0, 423.0], [670.0, 640.6666666666666], [646.0, 584.0], [640.0, 581.5], [641.0, 6758.5], [645.0, 416.0], [644.0, 6048.75], [643.0, 3582.5], [655.0, 633.0], [653.0, 635.5], [652.0, 636.0], [651.0, 632.6666666666666], [649.0, 626.6666666666666], [648.0, 2813.0], [650.0, 2652.4], [671.0, 632.0], [657.0, 642.0], [656.0, 4520.555555555556], [665.0, 4597.428571428572], [669.0, 6698.5], [664.0, 5492.8], [647.0, 618.0], [662.0, 631.0], [661.0, 626.0], [660.0, 637.0], [658.0, 645.0], [699.0, 5894.5], [676.0, 645.5], [677.0, 648.8333333333334], [679.0, 5351.0], [672.0, 646.0], [674.0, 6697.0], [673.0, 6049.166666666667], [687.0, 5877.0], [685.0, 5634.0], [683.0, 5923.0], [682.0, 5924.666666666667], [681.0, 5927.0], [702.0, 5878.0], [690.0, 5920.0], [688.0, 5898.0], [698.0, 5879.5], [697.0, 5679.333333333333], [694.0, 5970.0], [691.0, 5904.333333333333], [705.0, 5891.0], [704.0, 5910.0], [752.0, 5823.0], [745.0, 5873.0], [744.0, 5819.0], [739.0, 5803.0], [737.0, 5802.0], [736.0, 5804.0], [787.0, 5163.75], [783.0, 5416.5], [781.0, 5295.857142857143], [778.0, 5068.0], [776.0, 5681.0], [772.0, 5080.0], [770.0, 6473.0], [769.0, 6047.859649122808], [817.0, 5734.0], [828.0, 5729.0], [827.0, 5438.666666666667], [824.0, 5041.5], [807.0, 5073.142857142857], [804.0, 5047.5], [803.0, 5662.0], [823.0, 5124.0], [822.0, 5118.0], [820.0, 5133.0], [816.0, 5708.333333333333], [814.0, 5177.333333333333], [811.0, 5435.0], [810.0, 5025.4], [808.0, 5041.5], [856.0, 4960.5], [859.0, 4954.0], [862.0, 4952.333333333333], [857.0, 4957.0], [854.0, 4974.75], [850.0, 5205.333333333333], [847.0, 4975.666666666667], [832.0, 5060.0], [844.0, 5009.0], [840.0, 5146.375], [892.0, 4877.0], [891.0, 890.75], [895.0, 4877.0], [890.0, 5299.8], [885.0, 4994.0], [884.0, 5083.142857142858], [880.0, 5000.0], [879.0, 5000.0], [870.0, 4941.333333333333], [866.0, 4945.75], [874.0, 5001.0], [873.0, 5004.0], [872.0, 4941.666666666667], [927.0, 2654.3333333333335], [915.0, 908.0], [918.0, 927.7142857142857], [917.0, 917.3333333333334], [916.0, 4914.142857142857], [919.0, 922.5], [913.0, 919.5], [914.0, 907.0], [912.0, 930.0], [925.0, 921.5], [924.0, 1890.0], [921.0, 923.0], [909.0, 4923.0], [899.0, 4912.666666666667], [898.0, 4876.0], [902.0, 4949.333333333333], [900.0, 4882.333333333333], [908.0, 4823.0], [907.0, 4864.0], [906.0, 4866.666666666667], [904.0, 4867.0], [923.0, 4847.75], [932.0, 1896.75], [929.0, 2866.0], [948.0, 2559.6], [946.0, 2031.25], [944.0, 945.3333333333334], [945.0, 5053.0], [942.0, 3541.6666666666665], [941.0, 945.0], [940.0, 4021.6], [939.0, 4790.5], [937.0, 4790.0], [938.0, 4789.0], [958.0, 4725.0], [957.0, 4726.0], [956.0, 4726.0], [934.0, 4799.333333333333], [974.0, 969.0], [970.0, 990.0], [971.0, 4713.0], [988.0, 4968.142857142858], [964.0, 4931.818181818182], [963.0, 4724.0], [981.0, 4967.5], [980.0, 5165.333333333333], [978.0, 4713.0], [976.0, 4935.0], [973.0, 4756.0], [972.0, 4757.0], [1020.0, 4576.0], [1000.0, 977.0], [998.0, 976.0], [999.0, 977.0], [997.0, 977.0], [992.0, 4833.0], [1002.0, 4581.666666666667], [1023.0, 1856.0714285714284], [1013.0, 4579.0], [1012.0, 4578.0], [1015.0, 4819.5], [1014.0, 4819.0], [1022.0, 981.5], [1021.0, 4791.222222222223], [1019.0, 4738.0], [1017.0, 5062.0], [1038.0, 840.0], [1080.0, 3598.0], [1084.0, 842.0], [1034.0, 987.6666666666666], [1036.0, 5137.75], [1072.0, 886.0], [1076.0, 832.8333333333333], [1032.0, 926.4], [1030.0, 836.0], [1054.0, 2932.0], [1052.0, 855.5], [1050.0, 854.5], [1042.0, 4725.0], [1056.0, 863.4117647058822], [1068.0, 3769.0], [1064.0, 4522.0], [1070.0, 2694.625], [1086.0, 1281.0], [1082.0, 825.0], [1146.0, 839.0], [1122.0, 2647.8888888888887], [1128.0, 4050.285714285714], [1130.0, 841.0], [1132.0, 1091.5], [1134.0, 1228.25], [1126.0, 1017.0], [1124.0, 931.0], [1120.0, 1011.5], [1150.0, 2844.3333333333335], [1144.0, 1344.0], [1142.0, 868.3333333333334], [1138.0, 1850.75], [1136.0, 2662.0], [1102.0, 2911.25], [1098.0, 1139.5], [1092.0, 3460.166666666667], [1096.0, 4796.571428571428], [1090.0, 2668.0], [1114.0, 846.5], [1116.0, 5039.0], [1112.0, 928.1666666666666], [1110.0, 1019.2400000000002], [1108.0, 1311.0], [1106.0, 840.6666666666666], [1104.0, 4630.0], [1162.0, 2820.75], [1166.0, 1036.5], [1164.0, 4259.0], [1200.0, 1298.5], [1202.0, 843.0], [1204.0, 1246.0], [1160.0, 2599.875], [1154.0, 1360.0], [1156.0, 2943.4285714285716], [1182.0, 1317.3333333333333], [1180.0, 1353.0], [1178.0, 1416.0], [1174.0, 3065.25], [1172.0, 932.3333333333334], [1170.0, 1504.5], [1168.0, 4816.0], [1198.0, 1057.0], [1196.0, 1063.8], [1206.0, 1074.0], [1208.0, 1060.0], [1212.0, 1114.5], [1214.0, 1202.8], [1186.0, 4074.25], [1190.0, 1149.2], [1194.0, 1316.2857142857144], [1220.0, 3023.8], [1270.0, 773.0], [1278.0, 4337.199999999999], [1224.0, 1062.8], [1222.0, 1657.0], [1246.0, 778.0], [1218.0, 1124.3333333333333], [1216.0, 1260.5], [1242.0, 777.0], [1240.0, 782.0], [1238.0, 890.0], [1234.0, 1601.5], [1232.0, 779.5], [1226.0, 2349.1428571428573], [1230.0, 2658.5], [1228.0, 780.5], [1266.0, 1944.6666666666667], [1264.0, 2710.0], [1250.0, 1585.0], [1254.0, 4526.0], [1248.0, 1589.25], [1262.0, 776.5], [1256.0, 4011.0], [1268.0, 3412.0], [1308.0, 4334.333333333333], [1338.0, 4261.0], [1342.0, 4266.142857142857], [1336.0, 4260.0], [1294.0, 4291.0], [1292.0, 4292.0], [1288.0, 4530.0], [1286.0, 4350.0], [1324.0, 4304.0], [1316.0, 4352.5], [1306.0, 4282.0], [1300.0, 4359.0], [1298.0, 4274.0], [1296.0, 4292.5], [1376.0, 4189.0], [1368.0, 4229.5], [1366.0, 4229.0], [1360.0, 4230.75], [1358.0, 4513.25], [1352.0, 4629.0], [1348.0, 4300.0], [1346.0, 4296.0], [1466.0, 4090.5], [1470.0, 4162.25], [1460.0, 4048.5], [1458.0, 4040.0], [1446.0, 4259.0], [1444.0, 4198.0], [1440.0, 4014.0], [1438.0, 4028.0], [1422.0, 4261.0], [1418.0, 4263.0], [1434.0, 4113.0], [1430.0, 4123.4], [1428.0, 4067.0], [1424.0, 4587.0], [1532.0, 3948.0], [1534.0, 3948.0], [1528.0, 3994.0], [1520.0, 3975.0], [1518.0, 3978.0], [1514.0, 3968.0], [1504.0, 4085.0], [1500.0, 3968.0], [1482.0, 4546.5], [1474.0, 4099.666666666667], [1492.0, 3983.0], [1488.0, 4012.0], [1550.0, 3894.5], [1598.0, 3966.0], [1592.0, 3802.0], [1546.0, 3965.0], [1540.0, 4211.0], [1574.0, 3828.0], [1572.0, 3976.5], [1570.0, 3959.0], [1564.0, 3830.0], [1558.0, 4185.5], [1556.0, 4211.0], [1554.0, 4197.0], [1612.0, 3743.0], [1650.0, 3665.0], [1648.0, 3792.8], [1644.0, 3707.0], [1630.0, 3641.0], [1624.0, 3647.5], [1620.0, 3651.0], [1618.0, 3683.0], [1610.0, 3738.5], [1606.0, 3728.0], [1604.0, 3869.0], [1602.0, 3798.0], [1600.0, 4354.0], [1716.0, 3471.0], [1686.0, 1067.5], [1682.0, 3786.3333333333335], [1690.0, 3549.0], [1674.0, 3714.714285714286], [1688.0, 3561.3333333333335], [1726.0, 3837.4], [1714.0, 3484.0], [1712.0, 3489.5], [1704.0, 3485.5], [1702.0, 3487.3333333333335], [1698.0, 3495.5], [1696.0, 3505.0], [1788.0, 1293.3333333333333], [1768.0, 1818.5], [1766.0, 1290.0], [1790.0, 1293.75], [1764.0, 3397.0], [1760.0, 3398.0], [1786.0, 3368.0], [1784.0, 3641.5], [1782.0, 3702.5], [1780.0, 3759.2], [1758.0, 3397.714285714286], [1734.0, 3471.0], [1728.0, 3470.0], [1742.0, 3840.0], [1736.0, 3471.0], [1750.0, 3401.0], [1748.0, 3419.0], [1746.0, 3687.0], [1772.0, 3396.0], [1824.0, 1354.6666666666667], [1852.0, 1326.0], [1792.0, 2549.4285714285716], [1822.0, 1366.0], [1818.0, 3380.3333333333335], [1826.0, 1354.0], [1828.0, 1354.125], [1832.0, 2126.2], [1830.0, 2220.5714285714284], [1836.0, 1568.3], [1834.0, 1631.5714285714287], [1838.0, 1346.7500000000002], [1854.0, 1873.0], [1850.0, 2272.75], [1848.0, 1347.25], [1846.0, 1339.3333333333333], [1844.0, 1349.25], [1842.0, 1335.0], [1840.0, 1807.25], [1860.0, 1422.3333333333333], [1870.0, 1402.0], [1856.0, 1452.9107142857142], [1858.0, 3195.0], [1886.0, 3442.4285714285716], [1884.0, 1398.0], [1882.0, 1481.3333333333333], [1880.0, 2015.4285714285713], [1862.0, 2307.5], [1864.0, 3185.5714285714284], [1866.0, 1459.5], [1910.0, 1390.25], [1898.0, 2638.8], [1918.0, 3398.0], [1892.0, 3368.6666666666665], [1888.0, 3452.0], [1914.0, 3389.625], [1912.0, 3446.0], [1900.0, 1393.0], [1902.0, 3348.0], [1908.0, 1393.0], [1906.0, 1393.3333333333333], [1872.0, 1352.0], [1874.0, 1388.6666666666667], [1876.0, 1430.6666666666667], [1934.0, 4033.0], [1956.0, 3045.5714285714284], [1966.0, 3221.0], [1960.0, 3257.3333333333335], [1946.0, 3266.6666666666665], [1942.0, 3314.0], [1936.0, 3335.142857142857], [1924.0, 3256.0], [1922.0, 3281.0], [1920.0, 3286.0], [2040.0, 2976.6666666666665], [1988.0, 1708.590909090909], [2042.0, 2918.5], [2036.0, 3046.0], [1992.0, 3035.0], [2024.0, 2998.0], [2020.0, 2955.5], [2016.0, 2952.2], [2014.0, 3021.0], [1984.0, 3131.1538461538466], [2008.0, 3029.0], [2076.0, 2900.0], [2172.0, 1782.0], [2144.0, 2679.0], [2136.0, 2737.0], [2112.0, 2875.0], [2104.0, 2735.0], [2100.0, 2844.5], [2096.0, 2885.2], [2088.0, 2858.333333333333], [2068.0, 2868.75], [2064.0, 2873.0], [2052.0, 2897.4285714285716], [2188.0, 1847.5], [2232.0, 2015.3333333333335], [2224.0, 1720.0], [2220.0, 2363.0], [2216.0, 2464.0], [2212.0, 2410.3333333333335], [2236.0, 1903.1111111111109], [2228.0, 1951.6666666666667], [2240.0, 1667.25], [2268.0, 2273.0], [2264.0, 2298.0], [2260.0, 2224.0], [2256.0, 2239.0], [2248.0, 2331.5], [2244.0, 2356.5], [2280.0, 2280.6], [2204.0, 2550.0], [2200.0, 2326.6666666666665], [2192.0, 1885.0], [2184.0, 1890.5], [2180.0, 1862.3333333333333], [2176.0, 1862.0], [2416.0, 2156.0], [2404.0, 2159.0], [2388.0, 2192.5], [2384.0, 2195.0], [2372.0, 2198.0], [2324.0, 2213.0], [2312.0, 2243.125], [2304.0, 2267.3333333333335], [2500.0, 2133.0], [2496.0, 2112.0], [2504.0, 2290.25], [2516.0, 2677.5], [2544.0, 2590.0], [2536.0, 2565.3333333333335], [2460.0, 2094.5], [2456.0, 2086.0], [2432.0, 2158.0], [2488.0, 2133.3333333333335], [2472.0, 2091.857142857143], [2524.0, 2600.0], [2520.0, 2688.25], [2628.0, 2013.75], [2684.0, 2184.25], [2648.0, 2179.0], [2644.0, 1935.0454545454545], [2632.0, 1837.0], [2624.0, 1942.0], [2680.0, 2211.0], [2676.0, 2138.0], [2672.0, 2158.5], [2664.0, 2170.3333333333335], [2572.0, 2322.0], [2568.0, 2356.0], [2580.0, 2364.8], [2584.0, 2313.0], [2588.0, 2264.0], [2612.0, 1847.6666666666667], [2604.0, 2312.5], [2592.0, 2275.5], [2692.0, 2153.0], [2720.0, 1938.0], [2744.0, 1950.5], [2688.0, 2194.0], [2704.0, 2169.0], [2700.0, 2201.0], [2732.0, 1941.25], [2728.0, 2024.2], [2712.0, 2127.0], [2708.0, 2150.5], [2852.0, 1925.105263157895], [2165.0, 1837.6666666666667], [2169.0, 2315.2], [2113.0, 2856.75], [2161.0, 2672.2500000000005], [2153.0, 2706.5], [2149.0, 2736.5], [2145.0, 2691.0], [2101.0, 2905.0], [2061.0, 2897.8888888888887], [2137.0, 2754.0], [2129.0, 2783.0], [2121.0, 2824.0], [2117.0, 2782.5], [2233.0, 1634.5], [2189.0, 2149.6666666666665], [2225.0, 1556.5], [2221.0, 1555.0], [2217.0, 1731.0], [2213.0, 1773.6], [2209.0, 2054.2], [2237.0, 1688.25], [2177.0, 2612.0], [2229.0, 1688.0], [2241.0, 1622.5], [2269.0, 2317.0], [2245.0, 2376.0], [2297.0, 2294.0], [2289.0, 2198.0], [2285.0, 2275.5], [2205.0, 1720.6666666666667], [2201.0, 1880.0], [2193.0, 2390.75], [2197.0, 2493.0], [2185.0, 2446.3333333333335], [2181.0, 1885.0], [2417.0, 2114.8333333333335], [2309.0, 1872.0], [2429.0, 2156.5], [2401.0, 2161.0], [2393.0, 2192.285714285714], [2389.0, 2195.0], [2381.0, 2195.0], [2373.0, 2198.0], [2321.0, 2219.8571428571427], [2553.0, 2446.0], [2497.0, 2110.5], [2501.0, 2484.0], [2505.0, 2828.0], [2521.0, 2730.0], [2557.0, 2401.1428571428573], [2545.0, 2398.0], [2541.0, 2509.0], [2533.0, 2612.0], [2529.0, 2627.4], [2485.0, 2109.0], [2433.0, 2157.0], [2445.0, 2098.0], [2437.0, 2157.0], [2477.0, 2152.0], [2473.0, 2099.0], [2681.0, 2153.0], [2669.0, 2154.0], [2629.0, 1909.6666666666667], [2637.0, 2256.0], [2641.0, 2201.5], [2625.0, 1867.3333333333333], [2617.0, 2257.0], [2609.0, 2216.5], [2605.0, 2259.0], [2597.0, 2250.0], [2621.0, 2228.0], [2585.0, 2322.0], [2581.0, 2327.0], [2573.0, 2400.0], [2677.0, 2134.0], [2673.0, 2172.0], [2741.0, 2037.5], [2721.0, 1956.3333333333333], [2749.0, 1949.8], [2689.0, 2143.0], [2697.0, 2200.0], [2701.0, 2136.0], [2737.0, 2054.0], [2733.0, 2075.0], [2725.0, 2010.0], [2713.0, 2123.0], [1073.0, 810.0], [1033.0, 1436.7142857142858], [1039.0, 5078.124999999999], [1075.0, 831.0], [1077.0, 838.3333333333334], [1081.0, 840.0], [1031.0, 961.5], [1055.0, 3645.0], [1027.0, 4814.5], [1025.0, 4576.666666666667], [1053.0, 2931.75], [1047.0, 5043.75], [1045.0, 5110.0], [1087.0, 3942.6923076923076], [1069.0, 885.5], [1059.0, 860.6666666666666], [1063.0, 4522.0], [1067.0, 3067.2], [1057.0, 1587.6], [1071.0, 872.8571428571428], [1085.0, 1693.0], [1083.0, 842.0], [1147.0, 3542.3333333333335], [1127.0, 956.0], [1129.0, 1866.25], [1133.0, 918.4], [1135.0, 1209.75], [1123.0, 1336.0], [1121.0, 2327.0], [1151.0, 843.5], [1149.0, 1260.0], [1145.0, 2895.0], [1143.0, 4158.666666666667], [1141.0, 846.0], [1139.0, 861.5], [1103.0, 1774.0], [1137.0, 4376.8], [1099.0, 840.0], [1095.0, 1271.6666666666667], [1093.0, 1409.5], [1089.0, 830.0], [1091.0, 5046.0], [1119.0, 3037.0], [1117.0, 853.0], [1115.0, 4296.6], [1109.0, 840.0], [1105.0, 3794.6666666666665], [1201.0, 1319.0], [1213.0, 4134.538461538462], [1195.0, 1057.0], [1167.0, 2255.5], [1203.0, 1082.3333333333333], [1165.0, 1693.0], [1163.0, 969.6666666666666], [1183.0, 1359.0], [1153.0, 1296.5], [1155.0, 2349.0], [1159.0, 2574.0], [1157.0, 842.0], [1181.0, 1346.0], [1179.0, 795.0], [1177.0, 2515.0], [1175.0, 1419.0], [1173.0, 934.0], [1171.0, 1358.0], [1197.0, 1158.2857142857144], [1199.0, 1164.0], [1207.0, 1165.3333333333333], [1187.0, 1966.4], [1191.0, 4250.0], [1193.0, 1156.5], [1211.0, 1071.5], [1221.0, 3101.0], [1223.0, 1758.25], [1245.0, 777.0], [1243.0, 4026.25], [1247.0, 4025.3333333333335], [1217.0, 4126.0], [1239.0, 1035.0], [1237.0, 3455.142857142857], [1233.0, 782.0], [1235.0, 4520.0], [1225.0, 950.3333333333334], [1227.0, 983.6666666666666], [1271.0, 771.0], [1253.0, 1376.0], [1251.0, 2239.333333333333], [1257.0, 2626.0], [1255.0, 1369.0], [1261.0, 3116.6666666666665], [1259.0, 3150.571428571429], [1263.0, 2536.75], [1269.0, 775.0], [1229.0, 4359.5], [1289.0, 4526.0], [1335.0, 4260.0], [1339.0, 4316.0], [1331.0, 4316.0], [1321.0, 4333.0], [1315.0, 4274.0], [1309.0, 4455.0], [1305.0, 4304.8], [1287.0, 4406.166666666667], [1285.0, 4295.0], [1377.0, 4185.0], [1375.0, 4190.0], [1371.0, 4191.0], [1365.0, 4229.0], [1351.0, 4234.0], [1347.0, 4552.5], [1345.0, 4297.0], [1467.0, 3983.0], [1471.0, 4066.0], [1465.0, 4061.5], [1461.0, 4140.0], [1459.0, 4033.0], [1423.0, 4403.142857142857], [1421.0, 4593.0], [1413.0, 4303.7777777777765], [1439.0, 4088.0], [1437.0, 4130.666666666667], [1453.0, 4192.0], [1451.0, 4210.833333333334], [1443.0, 4191.0], [1441.0, 4192.0], [1527.0, 3922.2], [1535.0, 3925.0], [1523.0, 4451.0], [1485.0, 4385.6], [1483.0, 4146.0], [1477.0, 4053.0], [1519.0, 3950.75], [1515.0, 3939.0], [1509.0, 3940.0], [1501.0, 3914.0], [1499.0, 4048.0], [1497.0, 3952.0], [1495.0, 4001.5], [1493.0, 4053.0], [1491.0, 4035.3333333333335], [1565.0, 3834.0], [1589.0, 3882.0], [1595.0, 3874.0], [1587.0, 3902.0], [1551.0, 3933.3333333333335], [1547.0, 3895.0], [1537.0, 3974.0], [1579.0, 4021.6], [1571.0, 3902.3333333333335], [1563.0, 3952.0], [1559.0, 4458.0], [1555.0, 3879.6666666666665], [1553.0, 3960.0], [1631.0, 3635.0], [1659.0, 4127.0], [1635.0, 1053.8], [1655.0, 3786.0], [1613.0, 3743.0], [1611.0, 3803.0], [1607.0, 3746.0], [1605.0, 3753.0], [1603.0, 3798.0], [1637.0, 3611.75], [1633.0, 3575.5], [1629.0, 3643.0], [1627.0, 3648.6], [1623.0, 3678.0], [1617.0, 3675.0], [1679.0, 3652.6], [1721.0, 3561.2], [1667.0, 1067.8], [1727.0, 4537.0], [1715.0, 3897.4999999999995], [1699.0, 3501.0], [1695.0, 3506.0], [1693.0, 3547.3333333333335], [1671.0, 3871.25], [1669.0, 3872.0], [1767.0, 1297.6666666666667], [1769.0, 1817.25], [1789.0, 2760.3333333333335], [1787.0, 1292.3333333333333], [1777.0, 3812.5], [1743.0, 3828.0], [1739.0, 3650.8571428571427], [1737.0, 3471.0], [1733.0, 3469.0], [1751.0, 3397.0], [1749.0, 3401.0], [1747.0, 3418.0], [1775.0, 3675.0], [1773.0, 3617.5], [1771.0, 3783.0], [1763.0, 3397.3333333333335], [1827.0, 1355.8333333333335], [1793.0, 1296.0], [1823.0, 1354.0], [1819.0, 3555.0], [1815.0, 3401.1428571428573], [1855.0, 1874.4285714285713], [1829.0, 1903.0], [1831.0, 1994.3333333333335], [1835.0, 1492.3999999999999], [1833.0, 2655.8181818181815], [1839.0, 1968.1666666666665], [1837.0, 1511.3846153846157], [1853.0, 2267.0], [1849.0, 1320.0], [1845.0, 2142.0], [1843.0, 1962.0], [1799.0, 3354.5], [1847.0, 1349.0], [1863.0, 1421.0], [1861.0, 1378.0], [1857.0, 2308.0], [1859.0, 2602.6666666666665], [1887.0, 2098.6666666666665], [1877.0, 1419.0], [1879.0, 3467.5], [1883.0, 3424.0], [1881.0, 3508.0], [1865.0, 2091.0], [1867.0, 1398.0], [1869.0, 2884.5], [1891.0, 1817.0], [1889.0, 1397.0], [1895.0, 2249.8571428571427], [1893.0, 1395.5], [1897.0, 1393.0], [1899.0, 2114.3333333333335], [1903.0, 1908.0], [1901.0, 2216.4], [1907.0, 1393.0], [1913.0, 3407.0], [1911.0, 3329.0], [1919.0, 3392.0], [1915.0, 3326.0], [1871.0, 1420.0], [1873.0, 2621.714285714286], [1875.0, 1393.0], [1971.0, 3160.5], [1969.0, 3218.3333333333335], [1967.0, 3265.0], [1963.0, 3239.0], [1957.0, 3286.0], [1955.0, 3274.5], [1953.0, 3261.0], [1943.0, 3321.666666666667], [1923.0, 3327.0], [1927.0, 3285.5], [1925.0, 3246.0], [1933.0, 3320.0], [1997.0, 2597.714285714286], [1987.0, 2316.0], [2037.0, 2977.0], [2035.0, 2954.0], [2029.0, 2991.8], [2021.0, 3011.0], [2013.0, 2993.0], [2005.0, 3032.125], [1991.0, 3067.3333333333335], [2158.0, 1738.0], [2170.0, 1864.0], [2166.0, 2319.6], [2162.0, 1876.0], [2174.0, 2559.6666666666665], [2146.0, 2716.0], [2050.0, 2969.0], [2106.0, 2873.0], [2098.0, 2828.0], [2082.0, 2864.3333333333335], [2194.0, 1876.3333333333333], [2190.0, 2256.5], [2230.0, 1679.5714285714287], [2218.0, 1929.8333333333333], [2222.0, 1870.0], [2226.0, 2072.5], [2206.0, 1685.0], [2286.0, 2299.3333333333335], [2298.0, 2286.714285714286], [2246.0, 2351.0], [2290.0, 2276.5], [2202.0, 1815.0], [2198.0, 2092.333333333333], [2186.0, 2072.3333333333335], [2182.0, 1813.0], [2178.0, 2456.0], [2238.0, 1631.0], [2234.0, 1691.0], [2406.0, 2159.0], [2386.0, 2193.5], [2382.0, 2194.0], [2378.0, 2197.0], [2370.0, 2244.913043478262], [2314.0, 2237.5], [2558.0, 2449.0], [2550.0, 2497.0], [2498.0, 2111.0], [2502.0, 2112.0], [2514.0, 2640.0], [2538.0, 2530.0], [2530.0, 2589.0], [2470.0, 2078.0], [2434.0, 2158.0], [2458.0, 2089.6], [2438.0, 2156.0], [2462.0, 2096.0], [2522.0, 2701.0], [2518.0, 2705.0], [2682.0, 2166.0], [2630.0, 1885.2631578947367], [2646.0, 1889.0], [2626.0, 1907.6666666666667], [2674.0, 2145.0], [2670.0, 2153.0], [2622.0, 2239.0], [2562.0, 2328.5], [2574.0, 2359.0], [2582.0, 2375.0], [2614.0, 2154.4], [2610.0, 2197.0], [2598.0, 2260.0], [2742.0, 1994.0], [2690.0, 2155.3333333333335], [2694.0, 2162.0], [2738.0, 1981.3333333333333], [2714.0, 2123.0], [2706.0, 2198.0], [2854.0, 2029.0], [2175.0, 1863.0], [2167.0, 1847.0], [2159.0, 1845.0], [2171.0, 2621.0], [2163.0, 2628.5], [2147.0, 2705.5], [2079.0, 2847.8333333333335], [2075.0, 2914.0], [2071.0, 2898.6666666666665], [2111.0, 2870.0], [2107.0, 2805.6666666666665], [2103.0, 2817.0], [2095.0, 2900.0], [2135.0, 2722.75], [2131.0, 2728.3333333333335], [2127.0, 2784.428571428571], [2123.0, 2815.0], [2231.0, 2129.6666666666665], [2227.0, 1725.2], [2223.0, 1723.5], [2219.0, 2125.0], [2215.0, 2194.6], [2235.0, 1675.1666666666667], [2207.0, 2130.1666666666665], [2275.0, 2269.75], [2271.0, 2281.5], [2255.0, 2350.5555555555557], [2247.0, 2304.0], [2203.0, 2174.0], [2195.0, 2316.3333333333335], [2187.0, 1824.25], [2183.0, 1891.5], [2239.0, 1622.5714285714287], [2431.0, 2157.0], [2423.0, 2154.75], [2419.0, 2154.5], [2407.0, 2161.0], [2379.0, 2194.0], [2375.0, 2197.0], [2499.0, 2110.0], [2559.0, 2455.0], [2503.0, 2110.0], [2511.0, 2823.0], [2519.0, 2701.0], [2515.0, 2725.6], [2527.0, 2699.0], [2555.0, 2461.5], [2543.0, 2516.0], [2539.0, 2517.5], [2463.0, 2091.0], [2459.0, 2094.0], [2455.0, 2088.0], [2443.0, 2260.1428571428573], [2435.0, 2159.0], [2479.0, 2117.5], [2471.0, 2081.0], [2627.0, 2033.2], [2635.0, 2262.0], [2639.0, 2246.222222222222], [2647.0, 2156.0], [2619.0, 1883.0], [2607.0, 2234.5], [2603.0, 2311.0], [2599.0, 2259.0], [2663.0, 2170.0], [2587.0, 2298.5], [2575.0, 2353.428571428571], [2563.0, 2395.5], [2623.0, 2265.0], [2679.0, 2154.0], [2695.0, 2153.6666666666665], [2699.0, 2207.0], [2719.0, 2028.5], [2715.0, 2157.5714285714284], [2711.0, 2128.0], [1.0, 10261.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1219.9214000000009, 2803.442599999998]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2854.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9500.0, "minX": 1.69529976E12, "maxY": 79166.66666666667, "series": [{"data": [[1.69529976E12, 79166.66666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69529976E12, 9500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69529976E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2803.442599999998, "minX": 1.69529976E12, "maxY": 2803.442599999998, "series": [{"data": [[1.69529976E12, 2803.442599999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69529976E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2803.239999999998, "minX": 1.69529976E12, "maxY": 2803.239999999998, "series": [{"data": [[1.69529976E12, 2803.239999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69529976E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 515.9809999999998, "minX": 1.69529976E12, "maxY": 515.9809999999998, "series": [{"data": [[1.69529976E12, 515.9809999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69529976E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 162.0, "minX": 1.69529976E12, "maxY": 10262.0, "series": [{"data": [[1.69529976E12, 10262.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69529976E12, 5968.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69529976E12, 9216.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69529976E12, 6559.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69529976E12, 162.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69529976E12, 2211.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69529976E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 218.0, "minX": 9.0, "maxY": 10259.0, "series": [{"data": [[532.0, 720.0], [544.0, 404.5], [548.0, 1425.5], [586.0, 5900.5], [9.0, 10259.0], [176.0, 6308.0], [63.0, 218.0], [79.0, 9217.0], [343.0, 3428.0], [373.0, 4780.0], [394.0, 2622.5], [410.0, 4149.0], [442.0, 2159.0], [501.0, 932.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 218.0, "minX": 9.0, "maxY": 10259.0, "series": [{"data": [[532.0, 720.0], [544.0, 404.5], [548.0, 1425.5], [586.0, 5900.5], [9.0, 10259.0], [176.0, 6308.0], [63.0, 218.0], [79.0, 9217.0], [343.0, 3428.0], [373.0, 4780.0], [394.0, 2622.5], [410.0, 4149.0], [442.0, 2159.0], [501.0, 932.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69529976E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69529976E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69529976E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69529976E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69529976E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69529976E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69529976E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69529976E12, 83.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69529976E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69529976E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69529976E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69529976E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

